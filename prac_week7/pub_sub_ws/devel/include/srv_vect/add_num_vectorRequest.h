// Generated by gencpp from file srv_vect/add_num_vectorRequest.msg
// DO NOT EDIT!


#ifndef SRV_VECT_MESSAGE_ADD_NUM_VECTORREQUEST_H
#define SRV_VECT_MESSAGE_ADD_NUM_VECTORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <srv_vect/num_to_add.h>

namespace srv_vect
{
template <class ContainerAllocator>
struct add_num_vectorRequest_
{
  typedef add_num_vectorRequest_<ContainerAllocator> Type;

  add_num_vectorRequest_()
    : triple_vect()  {
    }
  add_num_vectorRequest_(const ContainerAllocator& _alloc)
    : triple_vect(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::srv_vect::num_to_add_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srv_vect::num_to_add_<ContainerAllocator> >::other >  _triple_vect_type;
  _triple_vect_type triple_vect;





  typedef boost::shared_ptr< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct add_num_vectorRequest_

typedef ::srv_vect::add_num_vectorRequest_<std::allocator<void> > add_num_vectorRequest;

typedef boost::shared_ptr< ::srv_vect::add_num_vectorRequest > add_num_vectorRequestPtr;
typedef boost::shared_ptr< ::srv_vect::add_num_vectorRequest const> add_num_vectorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srv_vect::add_num_vectorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srv_vect::add_num_vectorRequest_<ContainerAllocator1> & lhs, const ::srv_vect::add_num_vectorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.triple_vect == rhs.triple_vect;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srv_vect::add_num_vectorRequest_<ContainerAllocator1> & lhs, const ::srv_vect::add_num_vectorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srv_vect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26ee6ff0fea7723aa88681e691bd7db4";
  }

  static const char* value(const ::srv_vect::add_num_vectorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26ee6ff0fea7723aULL;
  static const uint64_t static_value2 = 0xa88681e691bd7db4ULL;
};

template<class ContainerAllocator>
struct DataType< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srv_vect/add_num_vectorRequest";
  }

  static const char* value(const ::srv_vect::add_num_vectorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "num_to_add[] triple_vect\n"
"\n"
"================================================================================\n"
"MSG: srv_vect/num_to_add\n"
"int32 A\n"
"int32 B\n"
"int32 C\n"
;
  }

  static const char* value(const ::srv_vect::add_num_vectorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.triple_vect);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct add_num_vectorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srv_vect::add_num_vectorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srv_vect::add_num_vectorRequest_<ContainerAllocator>& v)
  {
    s << indent << "triple_vect[]" << std::endl;
    for (size_t i = 0; i < v.triple_vect.size(); ++i)
    {
      s << indent << "  triple_vect[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::srv_vect::num_to_add_<ContainerAllocator> >::stream(s, indent + "    ", v.triple_vect[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRV_VECT_MESSAGE_ADD_NUM_VECTORREQUEST_H
